"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/moderation/route";
exports.ids = ["app/api/moderation/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = import("pg");;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmoderation%2Froute&page=%2Fapi%2Fmoderation%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmoderation%2Froute.ts&appDir=%2FUsers%2Fmiguelgiraldo%2FDEVSPACE%2Fdev_gladgrade_portal%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmiguelgiraldo%2FDEVSPACE%2Fdev_gladgrade_portal&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmoderation%2Froute&page=%2Fapi%2Fmoderation%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmoderation%2Froute.ts&appDir=%2FUsers%2Fmiguelgiraldo%2FDEVSPACE%2Fdev_gladgrade_portal%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmiguelgiraldo%2FDEVSPACE%2Fdev_gladgrade_portal&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_miguelgiraldo_DEVSPACE_dev_gladgrade_portal_app_api_moderation_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/moderation/route.ts */ \"(rsc)/./app/api/moderation/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_miguelgiraldo_DEVSPACE_dev_gladgrade_portal_app_api_moderation_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_Users_miguelgiraldo_DEVSPACE_dev_gladgrade_portal_app_api_moderation_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/moderation/route\",\n        pathname: \"/api/moderation\",\n        filename: \"route\",\n        bundlePath: \"app/api/moderation/route\"\n    },\n    resolvedPagePath: \"/Users/miguelgiraldo/DEVSPACE/dev_gladgrade_portal/app/api/moderation/route.ts\",\n    nextConfigOutput,\n    userland: _Users_miguelgiraldo_DEVSPACE_dev_gladgrade_portal_app_api_moderation_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/moderation/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZtb2RlcmF0aW9uJTJGcm91dGUmcGFnZT0lMkZhcGklMkZtb2RlcmF0aW9uJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbW9kZXJhdGlvbiUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm1pZ3VlbGdpcmFsZG8lMkZERVZTUEFDRSUyRmRldl9nbGFkZ3JhZGVfcG9ydGFsJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRm1pZ3VlbGdpcmFsZG8lMkZERVZTUEFDRSUyRmRldl9nbGFkZ3JhZGVfcG9ydGFsJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM4QjtBQUMzRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvP2QyM2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL21pZ3VlbGdpcmFsZG8vREVWU1BBQ0UvZGV2X2dsYWRncmFkZV9wb3J0YWwvYXBwL2FwaS9tb2RlcmF0aW9uL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9tb2RlcmF0aW9uL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvbW9kZXJhdGlvblwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvbW9kZXJhdGlvbi9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9taWd1ZWxnaXJhbGRvL0RFVlNQQUNFL2Rldl9nbGFkZ3JhZGVfcG9ydGFsL2FwcC9hcGkvbW9kZXJhdGlvbi9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvbW9kZXJhdGlvbi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmoderation%2Froute&page=%2Fapi%2Fmoderation%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmoderation%2Froute.ts&appDir=%2FUsers%2Fmiguelgiraldo%2FDEVSPACE%2Fdev_gladgrade_portal%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmiguelgiraldo%2FDEVSPACE%2Fdev_gladgrade_portal&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/moderation/route.ts":
/*!*************************************!*\
  !*** ./app/api/moderation/route.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database_multi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database-multi */ \"(rsc)/./lib/database-multi.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_database_multi__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_database_multi__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// GET /api/moderation - Get content items for moderation\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const contentType = searchParams.get(\"type\") || \"all\";\n        const status = searchParams.get(\"status\") || \"pending\";\n        const page = Number.parseInt(searchParams.get(\"page\") || \"1\");\n        const limit = Number.parseInt(searchParams.get(\"limit\") || \"20\");\n        const search = searchParams.get(\"search\") || \"\";\n        console.log(`🔍 Fetching moderation items: type=${contentType}, status=${status}, page=${page}`);\n        const offset = (page - 1) * limit;\n        // Map status names to IDs\n        const statusMap = {\n            pending: 1,\n            approved: 2,\n            flagged: 3,\n            deleted: 4,\n            rejected: 5\n        };\n        const statusId = status === \"all\" ? null : statusMap[status] || 1;\n        // Build the query directly - using proper schema.table syntax\n        let items = [];\n        if (contentType === \"all\" || contentType === \"image\") {\n            const imageQuery = `\n        SELECT \n          'image' as content_type,\n          i.id,\n          i.imageurl as content,\n          i.datecreated as created_at,\n          COALESCE(i.moderation_status_id, 1) as moderation_status_id,\n          i.moderated_by_employee_id,\n          i.moderation_notes,\n          i.moderated_at,\n          COALESCE(u.firstname || ' ' || u.lastname, 'Unknown User') as user_name,\n          COALESCE(b.businessname, 'Unknown Business') as business_name,\n          (SELECT placeId FROM consumerRatings WHERE id = i.consumerRatingId LIMIT 1) as placeid,\n          NULL as message_category_id\n        FROM imageURLs i\n        LEFT JOIN users u ON i.userid = u.id\n        LEFT JOIN consumerRatings cr ON i.consumerRatingId = cr.id\n        LEFT JOIN businesses b ON cr.placeId = b.placeid\n        WHERE ($1::int IS NULL OR COALESCE(i.moderation_status_id, 1) = $1)\n        AND ($2::text = '' OR i.imageurl ILIKE $2 OR u.firstname ILIKE $2 OR u.lastname ILIKE $2 OR b.businessname ILIKE $2)\n        ORDER BY i.datecreated DESC\n        LIMIT $3 OFFSET $4\n      `;\n            const searchPattern = search ? `%${search}%` : \"\";\n            const imageResult = await _lib_database_multi__WEBPACK_IMPORTED_MODULE_1__.ggDB.query(imageQuery, [\n                statusId,\n                searchPattern,\n                limit,\n                offset\n            ]);\n            items = items.concat(imageResult.rows);\n        }\n        if (contentType === \"all\" || contentType === \"review\") {\n            const reviewQuery = `\n        SELECT \n          'review' as content_type,\n          r.id,\n          r.review as content,\n          r.datecreated as created_at,\n          COALESCE(r.moderation_status_id, 1) as moderation_status_id,\n          r.moderated_by_employee_id,\n          r.moderation_notes,\n          r.moderated_at,\n          COALESCE(u.firstname || ' ' || u.lastname, 'Unknown User') as user_name,\n          COALESCE(b.businessname, 'Unknown Business') as business_name,\n          r.placeid,\n          NULL as message_category_id\n        FROM consumerReviews r\n        LEFT JOIN users u ON r.userid = u.id\n        LEFT JOIN businesses b ON r.placeid = b.placeid\n        WHERE ($1::int IS NULL OR COALESCE(r.moderation_status_id, 1) = $1)\n        AND ($2::text = '' OR r.review ILIKE $2 OR u.firstname ILIKE $2 OR u.lastname ILIKE $2 OR b.businessname ILIKE $2)\n        ORDER BY r.datecreated DESC\n        LIMIT $3 OFFSET $4\n      `;\n            const searchPattern = search ? `%${search}%` : \"\";\n            const reviewResult = await _lib_database_multi__WEBPACK_IMPORTED_MODULE_1__.ggDB.query(reviewQuery, [\n                statusId,\n                searchPattern,\n                limit,\n                offset\n            ]);\n            items = items.concat(reviewResult.rows);\n        }\n        if (contentType === \"all\" || contentType === \"ad\") {\n            const adQuery = `\n        SELECT \n          'ad' as content_type,\n          a.id,\n          a.imageurl as content,\n          a.datecreated as created_at,\n          COALESCE(a.moderation_status_id, 1) as moderation_status_id,\n          a.moderated_by_employee_id,\n          a.moderation_notes,\n          a.moderated_at,\n          COALESCE(u.firstname || ' ' || u.lastname, 'Unknown User') as user_name,\n          COALESCE(b.businessname, 'Unknown Business') as business_name,\n          b.placeid,\n          NULL as message_category_id\n        FROM ads a\n        LEFT JOIN users u ON a.userid = u.id\n        LEFT JOIN businesses b ON a.businessid = b.id\n        WHERE ($1::int IS NULL OR COALESCE(a.moderation_status_id, 1) = $1)\n        AND ($2::text = '' OR a.imageurl ILIKE $2 OR u.firstname ILIKE $2 OR u.lastname ILIKE $2 OR b.businessname ILIKE $2)\n        ORDER BY a.datecreated DESC\n        LIMIT $3 OFFSET $4\n      `;\n            const searchPattern = search ? `%${search}%` : \"\";\n            const adResult = await _lib_database_multi__WEBPACK_IMPORTED_MODULE_1__.ggDB.query(adQuery, [\n                statusId,\n                searchPattern,\n                limit,\n                offset\n            ]);\n            items = items.concat(adResult.rows);\n        }\n        if (contentType === \"all\" || contentType === \"communication\") {\n            const commQuery = `\n        SELECT \n          'communication' as content_type,\n          c.id,\n          COALESCE(c.message_from_client, c.message_from_user, 'No message content') as content,\n          c.created_at,\n          COALESCE(c.moderation_status_id, 1) as moderation_status_id,\n          c.moderated_by_employee_id,\n          c.moderation_notes,\n          c.moderated_at,\n          CASE \n            WHEN c.message_from_client IS NOT NULL THEN COALESCE(client_u.firstname || ' ' || client_u.lastname, 'Unknown Client')\n            ELSE COALESCE(user_u.firstname || ' ' || user_u.lastname, 'Unknown User')\n          END as user_name,\n          COALESCE(b.businessname, 'Unknown Business') as business_name,\n          b.placeid,\n          c.message_category_id\n        FROM client_user_communications c\n        LEFT JOIN users client_u ON c.client_id = client_u.id\n        LEFT JOIN users user_u ON c.user_id = user_u.id\n        LEFT JOIN businesses b ON c.business_id = b.id\n        WHERE ($1::int IS NULL OR COALESCE(c.moderation_status_id, 1) = $1)\n        AND ($2::text = '' OR c.message_from_client ILIKE $2 OR c.message_from_user ILIKE $2)\n        ORDER BY c.created_at DESC\n        LIMIT $3 OFFSET $4\n      `;\n            const searchPattern = search ? `%${search}%` : \"\";\n            const commResult = await _lib_database_multi__WEBPACK_IMPORTED_MODULE_1__.ggDB.query(commQuery, [\n                statusId,\n                searchPattern,\n                limit,\n                offset\n            ]);\n            items = items.concat(commResult.rows);\n        }\n        // Sort all items by created_at\n        items.sort((a, b)=>new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n        // Add status names\n        const statusNames = {\n            1: \"pending\",\n            2: \"approved\",\n            3: \"flagged\",\n            4: \"deleted\",\n            5: \"rejected\"\n        };\n        items = items.map((item)=>({\n                ...item,\n                moderation_status: statusNames[item.moderation_status_id] || \"pending\"\n            }));\n        // Get total count for pagination\n        let totalCount = 0;\n        if (contentType === \"all\") {\n            const countQueries = [\n                `SELECT COUNT(*) as count FROM imageURLs WHERE ($1::int IS NULL OR COALESCE(moderation_status_id, 1) = $1)`,\n                `SELECT COUNT(*) as count FROM consumerReviews WHERE ($1::int IS NULL OR COALESCE(moderation_status_id, 1) = $1)`,\n                `SELECT COUNT(*) as count FROM ads WHERE ($1::int IS NULL OR COALESCE(moderation_status_id, 1) = $1)`,\n                `SELECT COUNT(*) as count FROM client_user_communications WHERE ($1::int IS NULL OR COALESCE(moderation_status_id, 1) = $1)`\n            ];\n            for (const query of countQueries){\n                const result = await _lib_database_multi__WEBPACK_IMPORTED_MODULE_1__.ggDB.query(query, [\n                    statusId\n                ]);\n                totalCount += Number.parseInt(result.rows[0]?.count || \"0\");\n            }\n        } else {\n            let tableName = \"\";\n            switch(contentType){\n                case \"image\":\n                    tableName = \"imageURLs\";\n                    break;\n                case \"review\":\n                    tableName = \"consumerReviews\";\n                    break;\n                case \"ad\":\n                    tableName = \"ads\";\n                    break;\n                case \"communication\":\n                    tableName = \"client_user_communications\";\n                    break;\n            }\n            if (tableName) {\n                const countResult = await _lib_database_multi__WEBPACK_IMPORTED_MODULE_1__.ggDB.query(`SELECT COUNT(*) as count FROM ${tableName} WHERE ($1::int IS NULL OR COALESCE(moderation_status_id, 1) = $1)`, [\n                    statusId\n                ]);\n                totalCount = Number.parseInt(countResult.rows[0]?.count || \"0\");\n            }\n        }\n        console.log(`✅ Found ${items.length} moderation items (${totalCount} total)`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: items,\n            pagination: {\n                page,\n                limit,\n                total: totalCount,\n                totalPages: Math.ceil(totalCount / limit)\n            }\n        });\n    } catch (error) {\n        console.error(\"❌ Error fetching moderation items:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to fetch moderation items\",\n            details: errorMessage\n        }, {\n            status: 500\n        });\n    }\n}\n// POST /api/moderation - Moderate content items (individual or bulk)\nasync function POST(request) {\n    try {\n        const { items, action, notes, moderator_id } = await request.json();\n        if (!items || !Array.isArray(items) || items.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Items array is required\"\n            }, {\n                status: 400\n            });\n        }\n        if (!action || ![\n            \"approve\",\n            \"reject\",\n            \"flag\",\n            \"delete\"\n        ].includes(action)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Valid action is required (approve, reject, flag, delete)\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(`🔨 Moderating ${items.length} items with action: ${action}`);\n        const statusMap = {\n            approve: 2,\n            reject: 5,\n            flag: 3,\n            delete: 4\n        };\n        const newStatusId = statusMap[action];\n        const moderatedAt = new Date().toISOString();\n        const client = await _lib_database_multi__WEBPACK_IMPORTED_MODULE_1__.ggDB.getClient();\n        try {\n            await client.query(\"BEGIN\");\n            const results = [];\n            for (const item of items){\n                const { content_type, id } = item;\n                const itemNotes = item.notes || notes || \"\";\n                let tableName = \"\";\n                switch(content_type){\n                    case \"image\":\n                        tableName = \"imageURLs\";\n                        break;\n                    case \"review\":\n                        tableName = \"consumerReviews\";\n                        break;\n                    case \"ad\":\n                        tableName = \"ads\";\n                        break;\n                    case \"communication\":\n                        tableName = \"client_user_communications\";\n                        break;\n                    default:\n                        throw new Error(`Invalid content type: ${content_type}`);\n                }\n                // Update moderation status\n                const updateQuery = `\n          UPDATE ${tableName}\n          SET \n            moderation_status_id = $1,\n            moderated_by_employee_id = $2,\n            moderation_notes = $3,\n            moderated_at = $4\n          WHERE id = $5\n          RETURNING id\n        `;\n                const updateResult = await client.query(updateQuery, [\n                    newStatusId,\n                    moderator_id || null,\n                    itemNotes,\n                    moderatedAt,\n                    id\n                ]);\n                if (updateResult.rows.length > 0) {\n                    results.push({\n                        content_type,\n                        id,\n                        action,\n                        success: true\n                    });\n                } else {\n                    results.push({\n                        content_type,\n                        id,\n                        action,\n                        success: false,\n                        error: \"Item not found\"\n                    });\n                }\n            }\n            await client.query(\"COMMIT\");\n            const successCount = results.filter((r)=>r.success).length;\n            console.log(`✅ Successfully moderated ${successCount}/${items.length} items`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: `Successfully ${action}ed ${successCount} items`,\n                results\n            });\n        } catch (error) {\n            await client.query(\"ROLLBACK\");\n            throw error;\n        } finally{\n            client.release();\n        }\n    } catch (error) {\n        console.error(\"❌ Error moderating content:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to moderate content\",\n            details: errorMessage\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/moderation/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database-multi.ts":
/*!*******************************!*\
  !*** ./lib/database-multi.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeAllPools: () => (/* binding */ closeAllPools),\n/* harmony export */   connectToDatabase: () => (/* binding */ connectToDatabase),\n/* harmony export */   corpDB: () => (/* binding */ corpDB),\n/* harmony export */   getClient: () => (/* binding */ getClient),\n/* harmony export */   ggDB: () => (/* binding */ ggDB),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   testConnection: () => (/* binding */ testConnection)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Determine connection method based on environment\nconst isProduction = \"development\" === \"production\";\nconst isGoogleCloud = process.env.GOOGLE_CLOUD_PROJECT || process.env.FIREBASE_PROJECT_ID;\n// Base connection configuration (without database name)\nconst getBaseConfig = ()=>{\n    if (isProduction && isGoogleCloud) {\n        // Unix Socket for production\n        return {\n            host: `/cloudsql/${process.env.FIREBASE_PROJECT_ID}:us-east4:gg-instance`,\n            user: process.env.DB_USER || \"postgres\",\n            password: process.env.DB_PASSWORD,\n            ssl: false,\n            max: 20,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 10000\n        };\n    } else {\n        // Public IP for local development\n        return {\n            host: process.env.DB_HOST || \"34.86.121.148\",\n            port: Number.parseInt(process.env.DB_PORT || \"5432\"),\n            user: process.env.DB_USER || \"postgres\",\n            password: process.env.DB_PASSWORD,\n            ssl: {\n                rejectUnauthorized: false\n            },\n            max: 20,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 10000\n        };\n    }\n};\n// Create multiple connection pools for different databases\nconst pools = {\n    corp: new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n        ...getBaseConfig(),\n        database: \"corp\"\n    }),\n    gg: new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n        ...getBaseConfig(),\n        database: \"gg\"\n    })\n};\n// Database-specific query functions\nconst corpDB = {\n    query: async (text, params)=>{\n        console.log(\"\\uD83C\\uDFE2 Executing query on 'corp' database\");\n        return await pools.corp.query(text, params);\n    },\n    getClient: async ()=>{\n        return await pools.corp.connect();\n    },\n    testConnection: async ()=>{\n        try {\n            const result = await pools.corp.query(\"SELECT current_database(), current_user, NOW()\");\n            console.log(\"✅ 'corp' database connected:\", result.rows[0]);\n            return {\n                success: true,\n                data: result.rows[0]\n            };\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            console.error(\"❌ 'corp' database connection failed:\", errorMessage);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n};\nconst ggDB = {\n    query: async (text, params)=>{\n        console.log(\"\\uD83C\\uDFAE Executing query on 'gg' database\");\n        return await pools.gg.query(text, params);\n    },\n    getClient: async ()=>{\n        return await pools.gg.connect();\n    },\n    testConnection: async ()=>{\n        try {\n            const result = await pools.gg.query(\"SELECT current_database(), current_user, NOW()\");\n            console.log(\"✅ 'gg' database connected:\", result.rows[0]);\n            return {\n                success: true,\n                data: result.rows[0]\n            };\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            console.error(\"❌ 'gg' database connection failed:\", errorMessage);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n};\n// Generic database connector\nconst connectToDatabase = (databaseName)=>{\n    const pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n        ...getBaseConfig(),\n        database: databaseName\n    });\n    return {\n        query: async (text, params)=>{\n            console.log(`🔍 Executing query on '${databaseName}' database`);\n            return await pool.query(text, params);\n        },\n        getClient: async ()=>{\n            return await pool.connect();\n        },\n        testConnection: async ()=>{\n            try {\n                const result = await pool.query(\"SELECT current_database(), current_user, NOW()\");\n                console.log(`✅ '${databaseName}' database connected:`, result.rows[0]);\n                return {\n                    success: true,\n                    data: result.rows[0]\n                };\n            } catch (error) {\n                const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n                console.error(`❌ '${databaseName}' database connection failed:`, errorMessage);\n                return {\n                    success: false,\n                    error: errorMessage\n                };\n            }\n        },\n        close: async ()=>{\n            await pool.end();\n            console.log(`🔒 '${databaseName}' database pool closed`);\n        }\n    };\n};\n// Close all pools\nconst closeAllPools = async ()=>{\n    await Promise.all([\n        pools.corp.end(),\n        pools.gg.end()\n    ]);\n    console.log(\"\\uD83D\\uDD12 All database pools closed\");\n};\n// Export the original functions for backward compatibility\nconst query = corpDB.query;\nconst getClient = corpDB.getClient;\nconst testConnection = corpDB.testConnection;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database-multi.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fmoderation%2Froute&page=%2Fapi%2Fmoderation%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fmoderation%2Froute.ts&appDir=%2FUsers%2Fmiguelgiraldo%2FDEVSPACE%2Fdev_gladgrade_portal%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmiguelgiraldo%2FDEVSPACE%2Fdev_gladgrade_portal&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();